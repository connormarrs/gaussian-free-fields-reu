#include "gtest/gtest.h"
#include "../headers/DFGF_T2.hpp"
#include "../headers/RandArr.hpp"
#include "../headers/tools.hpp"

using namespace std;

/**
 * @brief Fixture to Set Up DFGF for testing
 * 
 * @details We fix s=1/4 and then mock up DFGF_S1 with n=10 and m=15
 * We then generated control eigenvalues, eigenfunctions, coefficients, etc.
 * for these functions using both Wolfram Mathematica and Python.
 * Finally, we verify that our code reproduces these results to at least
 * precision of 1e-6, which is what Python created.
 * 
 */
class DFGF_T2_Fixture: public ::testing::Test {
    protected:
        DFGF_T2_Fixture( ) { }
        ~DFGF_T2_Fixture( )  { }

        /* instantiate two DFGF objects */
        double s = .25;
        int n = 10;
        int m = 15;
        int numTrials = 30; 

        RandArr rand_arr_m = RandArr(m, numTrials);
        DFGF_T2 sample_field_m = DFGF_T2(s,m,numTrials, rand_arr_m);

        RandArr rand_arr_n = RandArr(n, numTrials);
        DFGF_T2 sample_field_n = DFGF_T2(s,n,numTrials, rand_arr_n);

        vector<vector<double>> known_eigvals_n = {
            {0.0, 0.9675312092750789, 3.500560800333523, 6.631557563900254, 9.1645871549587, 10.132118364233778, 9.1645871549587, 6.631557563900254, 3.5005608003335245, 0.9675312092750794}, 
            {0.9675312092750789, 1.9350624185501577, 4.468092009608602, 7.599088773175334, 10.132118364233778, 11.099649573508856, 10.132118364233778, 7.599088773175334, 4.468092009608603, 1.9350624185501584}, 
            {3.500560800333523, 4.468092009608602, 7.001121600667046, 10.132118364233778, 12.665147955292221, 13.632679164567302, 12.665147955292221, 10.132118364233778, 7.001121600667048, 4.468092009608602}, 
            {6.631557563900254, 7.599088773175334, 10.132118364233778, 13.263115127800509, 15.796144718858953, 16.76367592813403, 15.796144718858953, 13.263115127800509, 10.132118364233778, 7.599088773175334}, 
            {9.1645871549587, 10.132118364233778, 12.665147955292221, 15.796144718858953, 18.3291743099174, 19.296705519192475, 18.3291743099174, 15.796144718858953, 12.665147955292221, 10.132118364233778}, 
            {10.132118364233778, 11.099649573508856, 13.632679164567302, 16.76367592813403, 19.296705519192475, 20.264236728467555, 19.296705519192475, 16.76367592813403, 13.632679164567302, 11.099649573508856}, 
            {9.1645871549587, 10.132118364233778, 12.665147955292221, 15.796144718858953, 18.3291743099174, 19.296705519192475, 18.3291743099174, 15.796144718858953, 12.665147955292221, 10.132118364233778}, 
            {6.631557563900254, 7.599088773175334, 10.132118364233778, 13.263115127800509, 15.796144718858953, 16.76367592813403, 15.796144718858953, 13.263115127800509, 10.132118364233778, 7.599088773175334}, 
            {3.5005608003335245, 4.468092009608603, 7.001121600667048, 10.132118364233778, 12.665147955292221, 13.632679164567302, 12.665147955292221, 10.13211836423378, 7.001121600667049, 4.468092009608604}, 
            {0.9675312092750789, 1.9350624185501577, 4.468092009608602, 7.599088773175334, 10.132118364233778, 11.099649573508856, 10.132118364233778, 7.599088773175334, 4.468092009608603, 1.9350624185501584}
        };

        vector<vector<double>> known_eigvals_m = {
            {0.0, 0.9854636133271846, 3.7714588419085953, 7.876261800750427, 12.59011476730474, 17.0979497396445, 20.620321098657072, 22.548178836629976, 22.548178836629976, 20.620321098657072, 17.097949739644505, 12.590114767304751, 7.87626180075043, 3.771458841908593, 0.9854636133271834}, 
            {0.9854636133271858, 1.9709272266543705, 4.756922455235781, 8.861725414077613, 13.575578380631926, 18.083413352971682, 21.605784711984256, 23.533642449957163, 23.533642449957163, 21.605784711984256, 18.08341335297169, 13.575578380631937, 8.861725414077615, 4.756922455235779, 1.9709272266543691}, 
            {3.7714588419085953, 4.75692245523578, 7.5429176838171905, 11.647720642659023, 16.361573609213337, 20.869408581553092, 24.391779940565666, 26.319637678538573, 26.319637678538573, 24.391779940565666, 20.8694085815531, 16.361573609213348, 11.647720642659024, 7.542917683817189, 4.756922455235779}, 
            {7.876261800750427, 8.861725414077611, 11.647720642659023, 15.752523601500855, 20.466376568055168, 24.974211540394926, 28.4965828994075, 30.424440637380403, 30.424440637380403, 28.4965828994075, 24.974211540394933, 20.46637656805518, 15.752523601500856, 11.64772064265902, 8.861725414077611}, 
            {12.59011476730474, 13.575578380631926, 16.361573609213337, 20.466376568055168, 25.18022953460948, 29.688064506949235, 33.21043586596181, 35.13829360393472, 35.13829360393472, 33.21043586596181, 29.688064506949246, 25.18022953460949, 20.46637656805517, 16.361573609213334, 13.575578380631924}, 
            {17.0979497396445, 18.083413352971686, 20.869408581553095, 24.974211540394926, 29.68806450694924, 34.195899479289, 37.71827083830157, 39.64612857627448, 39.64612857627448, 37.71827083830157, 34.195899479289004, 29.68806450694925, 24.974211540394926, 20.869408581553092, 18.083413352971682}, 
            {20.620321098657072, 21.605784711984256, 24.391779940565666, 28.4965828994075, 33.21043586596181, 37.71827083830157, 41.240642197314145, 43.168499935287045, 43.168499935287045, 41.240642197314145, 37.71827083830158, 33.21043586596182, 28.4965828994075, 24.391779940565666, 21.605784711984256}, 
            {22.548178836629976, 23.533642449957163, 26.319637678538573, 30.424440637380403, 35.13829360393472, 39.64612857627448, 43.168499935287045, 45.09635767325995, 45.09635767325995, 43.168499935287045, 39.64612857627448, 35.13829360393473, 30.424440637380403, 26.319637678538573, 23.533642449957156}, 
            {22.548178836629976, 23.533642449957163, 26.319637678538573, 30.424440637380403, 35.13829360393472, 39.64612857627448, 43.168499935287045, 45.09635767325995, 45.09635767325995, 43.168499935287045, 39.64612857627448, 35.13829360393473, 30.424440637380403, 26.319637678538573, 23.533642449957156}, 
            {20.620321098657072, 21.605784711984256, 24.391779940565666, 28.4965828994075, 33.21043586596181, 37.71827083830157, 41.240642197314145, 43.168499935287045, 43.168499935287045, 41.240642197314145, 37.71827083830158, 33.21043586596182, 28.4965828994075, 24.391779940565666, 21.605784711984256}, 
            {17.097949739644505, 18.08341335297169, 20.8694085815531, 24.974211540394933, 29.688064506949246, 34.195899479289, 37.71827083830158, 39.64612857627448, 39.64612857627448, 37.71827083830158, 34.19589947928901, 29.688064506949257, 24.974211540394936, 20.8694085815531, 18.08341335297169}, 
            {12.590114767304751, 13.575578380631937, 16.361573609213348, 20.46637656805518, 25.18022953460949, 29.688064506949246, 33.21043586596182, 35.13829360393473, 35.13829360393473, 33.21043586596182, 29.688064506949257, 25.180229534609502, 20.466376568055182, 16.361573609213345, 13.575578380631935}, 
            {7.87626180075043, 8.861725414077615, 11.647720642659024, 15.752523601500856, 20.46637656805517, 24.974211540394926, 28.4965828994075, 30.424440637380403, 30.424440637380403, 28.4965828994075, 24.974211540394936, 20.466376568055182, 15.75252360150086, 11.647720642659023, 8.861725414077613}, 
            {3.771458841908593, 4.756922455235777, 7.542917683817189, 11.64772064265902, 16.361573609213334, 20.86940858155309, 24.391779940565662, 26.319637678538573, 26.319637678538573, 24.391779940565666, 20.8694085815531, 16.361573609213345, 11.647720642659023, 7.542917683817186, 4.7569224552357765}, 
            {0.9854636133271834, 1.9709272266543678, 4.756922455235779, 8.861725414077611, 13.575578380631924, 18.08341335297168, 21.605784711984253, 23.533642449957156, 23.533642449957156, 21.605784711984256, 18.08341335297169, 13.575578380631935, 8.861725414077613, 4.7569224552357765, 1.9709272266543667}
        };
};

/**
 * @brief Test if the computeEigenVector method properly computes values
 * with error at most 1e-8
 * 
 */
TEST_F (DFGF_T2_Fixture, checkEigenValues){
    vector<vector<double>> tested_eigenVals_n = sample_field_n.getEigenVals();
    vector<vector<double>> tested_eigenVals_m = sample_field_m.getEigenVals();

    /* verify that the arrays have the same size */
    ASSERT_EQ(tested_eigenVals_n.size(), known_eigvals_n.size());
    ASSERT_EQ(tested_eigenVals_m.size(), known_eigvals_m.size());

    /* loop through all values and assert that they are within 1e-8 of each other */
    for(unsigned int j=0; j<tested_eigenVals_n.size(); j++) {
        ASSERT_EQ(tested_eigenVals_n[j].size(), known_eigvals_n[j].size());
        for(unsigned int k=0; k<tested_eigenVals_n.size(); k++) {
            ASSERT_NEAR(tested_eigenVals_n[j][k], known_eigvals_n[j][k], 1e-8);
        }
    }

    for(unsigned int j=0; j<tested_eigenVals_m.size(); j++) {
        ASSERT_EQ(tested_eigenVals_m[j].size(), known_eigvals_m[j].size());
        for(unsigned int k=0; k<tested_eigenVals_m.size(); k++) {
            ASSERT_NEAR(tested_eigenVals_m[j][k], known_eigvals_m[j][k], 1e-8);
        }
    }
}
