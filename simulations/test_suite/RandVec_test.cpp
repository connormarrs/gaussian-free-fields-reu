#include "gtest/gtest.h"
#include "../headers/RandVec.hpp"
#include <iostream>
#include <numeric>
#include <thread>
#include <vector>
#include <future>
#include <fstream>

using namespace std;

/**
 * @brief Fixture to Set Up RandVec for testing
 * 
 * @details We mock up RandVec with maxN = 1000 and numTrials = 500
 */
class RandVec_Fixture: public ::testing::Test {
    protected:
        /* Constructor and destructor */
        RandVec_Fixture( ) { }
        ~RandVec_Fixture( )  { }

        /* instantiate a RandVec object */
        int n = 1000;
        int numTrials = 500; 

        RandVec gauss_vector_n = RandVec(n, numTrials);
};

/**
 * @brief We print to a csv the data points from the sample vector generated by RandVec
 * The data can then be used to graph a hist plot of the data to test for a normal ditribution
 * 
 */
TEST_F(RandVec_Fixture, test_get_sample) {
    // instantiate a RandVec object
    int n1 = 100;
    int numTrials1 = 50;
    bool ran = true;
    RandVec randvec(n1, numTrials1);

    // set up file to be written to
    string filename2("../test_suite/gaussVect.csv");
    fstream file2;
    file2.open(filename2, ios_base::out);
    
    // write all data to file, if open
    vector<vector<double>> vect = randvec.getSample(n1);
    for (long unsigned int i=0; i<vect.size(); i++) {
        for (long unsigned int k=0; k<vect[0].size(); k++)
        if(file2.is_open()) {
            file2 << vect[i][k] << ", ";
        }
        else {
            cout << "Failed to open" << endl;
            ran = false;
        }
    }
    file2.close();

    // Return pass if the program wrote to the file, else fails
    ASSERT_DOUBLE_EQ(ran,true);
}